package Day14;

public class day14_1 {
	
	public static void main(String[] args) {
		
	/*이것이 자바다 1권 정리
	@설계를 어디서부터 손대야 할지 모르니 많이 설계를 해봐야 한다.

		클래스
			클래스를 사용하는 이유*
			1. 여러개의 (서로 다른 자료형) 변수[메모리] 묶음 관리 (단 배열은x)
				예) 회원 만들기 : 필요한 메모리는 회원가입 할 때 필요한 기록.
				@컴퓨터는 메모리가 전부 기록이다.
				@회원가입 클래스 검색해서 코드 참고하기(다른 사람 거 많이 보기)
				객체화가 없을 경우(변수만 사용했을 경우)		
				
			2. 클래스(=설계도) 기반으로 많은 서로 다른 객체 생성
				@왜 설계도? 쓰는 목적 생각해보기* = 클래스에 쓰는 목적과 동일
				@계속 나 혹은 타인이 참고하기 위하여
				주차관리 : 설계를 판단해서 진행. 뭘 기록할지.
					차량번호, 입차시간, 출차시간, 금액	: @이렇게 했을 때 좋은 점
					차량이 많이 들어와도 변수 4개*차량으로 관리하는 것보다
					차량수*객체수 [관리가 편하다]	
					
			3. API(라이브러리) : 미리 만들어진 클래스.
				@가져와서 쓰면 좀 편함....
				String 클래스 *많이참고
				Scanner 클래스
				누군가가 만들어 놨기 때문에 만들어진 클래스를 이용한 빠른 개발이 가능하다
				@풍부하면 풍부할수록 내가 할 일이 적음
				@그래서 우리가 쓰는 변수가 Spring : 목적에 대한 생각...이게 다 API
				
			4. 필드(메모리), 생성자(객체 생성 시 초기값 들어감), 메소드
				필드 : 변수, 배열, 객체, 인터페이스 등
				객체 초기화 값을 쓰면... 생성자는 초기화 값**(헷갈리기 쉬움)
				생성자 : 선택
					예) 붕어빵틀[클래스]
					   필드 : 물, 밀가루 반죽, 내용물 (팥, 슈크림) 등등
					   빈 생성자를 만들면 그건 내용물이 없는 껍데기. 내용물 없는 붕어빵(객체) -> 나중에 내용물 추가가 가능
					   (모든 필드를 받는)풀 생성자 : 내용물이 있는 붕어빵(객체)
				메소드 : 코드 묶음처리
	*/
		
		
		String id = "asdasd"; //임의로 넣었을 때. 객체화x
		String pw = "1234";
		String name = "홍길동";
		/*회원가입에 필요한 기록 3가지
		이렇게 하면 회원가입 할 때마다 새로 생성해야함(id2...pw2....)
		
		변수를 따로 관리하는 것 : 배열
			@ but 단점 : String 사이에 int를 끼워넣으면 서로 다른 자료형이라
			
			회원이 생성 될 때마다 변수의 수는 회원수x변수의 개수로 들어가 변수가 많아 관리가 어렵다.
			@클래스 없이 해도 되지만 관리가 너무 힘듦.. 그래서 객체 지향이 편함
			
			@객체화가 아닐때2
			변수가 동일하면 배열을 사용 가능하지만 서로 다른 변수 간 배열이 없다.
			
			@ String name[] = new 써도 됨. 자료형이 다르면 못 들어가니 int point[] = new 이런식으로 새로 만들어줌
				@ 배열은 string과 int등 상자의 크기가 서로 다르기 때문에.
		*/
	
	
		//day14_1_회원에서 가져옴. 객체화o
		day14_1_회원 회원1 = new day14_1_회원();
		회원1.id = "12345";
		회원1.pw = "12345";
		회원1.name = "12345";
		회원1.point = 12;
		
		day14_1_회원 회원2 = new day14_1_회원();
		회원2.id = "12345";
		회원2.pw = "12345";
		회원2.name = "12345";
		회원2.point = 12;
	
		//이렇게 해놓으면 우리가 객체를 만들때 코드가 더 길 수 있지만 얘들 혼자서 움직일 수 있음
		//	@하나의 묶음처리가 된 상자. 그런데 .을 통해서 하나씩 꺼내 쓸 수 있음
	
	
	} //main end

} //class end
