package Day14;

public class day14_2_클래스멤버 { //day14_2_게시판
	
	/*클래스 멤버
		1. 필드
			1.접근제한자 (생략시 default 값이 들어간다.)
				static, final = 상수
				private = 현재 클래스 내에서 사용 가능
					필드 직접 접근 제한 = 필드에 저장(set)/호출(get) 시 무결성이 깨짐.
					아무나 들어올 수 없도록 하나의 차단문을 만듦
					@입구:setter. getter을 만들어 들어오는 문, 나가는 문 만들기
					@setter를 통해 검사.(얘를 써도 되는지)
				public = 모든 클래스 내에서 사용 가능
				default(생략 가능) = 동일 패키지 내에서만 사용 가능
				protected  = 동일 패키지 내에서만 사용 가능
			@4가지 중 하나가 들어감 이것이 접근 제한자. 이중에서 골라서 쓰면 된다.
			default와 protected는 비슷함.
			단 protected는 서로 다른 패키지의 수퍼클래스 접근이 가능하다.(디폴트는 안 됨)
			private와 public 차이점 중요*****
	
			2.자료형(클래스, 기본자료형)
				1.기본 자료형[ int, double, char, boolean
				2.클래스[ 사용자가 만든 클래스] : 회원클래스, 게시판클래스, 제품클래스, 카클래스
				3.클래스[미리 만들어진 클래스] : API(String, Scanner, Arraylist 등)
				4.인터페이스
				5.[] 배열				
				
			3.변수명(객체이름)
				* 이름은 본인이 원하는 대로 하되 중복 이름 x
				1.클래스명의 소문자로 쓰는 것이 편리[Scanner scanner]
				변수와 객체의 차이점 : new를 쓴다는 것. new는 무조건 객체
				변수, 객체, 인터페이스, 배열
				@필드 자리에는 저장하는 건(메모리에 관련된 것들. 변수나 new 쓰는 것들) 모두 들어간다.
	
	
		2. 생성자 [객체 생성시 초기값=처음 값.]
		@객체를 생성할때 처음에 값을 넣을 것인지 말것인지 결정
		@객체를 만들 때만 쓰므로 목적이 메소드와 다름. 굳이 반환이 필요없음
			1.접근제한자(어디에나 들어감. public~)
			2.생성자 이름(=클래스 이름. 다를 경우 오류) **중요
			3.인수[매개변수]
				필요에 따른 인수를 선택. -> 메소드 호출용(깡통용)
				@관례적으로 빈 생성자 하나와 풀 생성자(모든 필드를 받는)는 생성해두는 게 편하다.
				@쓸 수도 있고 안 쓸 수도 있지만... 혼자서 일하는게 아니므로.
				1. 빈 생성자[관례적 목적 : 메소드 호출용(호출시 객체 필요)]
				2. 모든 필드 생성자[관례적 목적 : 모든 필드 저장/호출]
				@필요에 따라 특정 필드를 꺼낼 때 본인이 선택
				3.특정 필드 생성자[몇가지의 필드만 저장]
					상황에 따른 객체 생성시 들어가는 필드
		쓰는 목적에 대해 생각*
	
		생성자와 메소드의 차이점:반환이 있느냐?
	
		3. 메소드[1. 코드 묶음 2. 재활용[재사용] 3. 인수에 따른 서로 다른 결과물 생성 가능 4. 반환타입(반환값) ]
			1.접근제한자
			2.반환자료형
				void = 반환 타입이 없다는 뜻 (메소드 종료 시 돌려주는 값 x)
				기본자료형/클래스/인터페이스/배열 등
			3.메소드이름(@주고받는 역할 생각. 내부-><-외부(반환타입))
			4.인수[매개변수]
				메소드 호출 시 메소드 안으로 들어오는 데이터
				예를 들어 객체명.메소드(3) -> 메소드(int 변수명)
					인수의 자료형은 동일하되 변수명은 자유
						객체명.메소드(유재석) -> 메소드(int 변수명) : 불가능
							문자열은 보냈으면 문자열로 받아야 한다.
										-> 메소드(String 변수명) : 가능
		@전에 만든 메소드 여기에다가 호출하면 실행 가능 = 재사용 가능
		
		
		
		
		
		
		*/
	
	
	
	
	
	
}
